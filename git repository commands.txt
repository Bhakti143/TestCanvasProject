Constantly updating list of config and setup commands//
Your Username and Email Address
git config --global user.name "<Your Name>"
git config --global user.email "<Your Email>"

Necessary core setup//
git config --global core.autocrlf false
git config --global core.safecrlf true

Setting up the proxy//
Only needed on Uni computers//
git config --global http.proxy http://proxy.uclan.ac.uk:3128

Storing your username and password//
After adding this, push as usual, it will ask for your username and password//
Next time it will not ask for your details
git config credential.helper store

Reduce push error, setting a default for pushing//
git config --global push.default simple

For mac users//
Globally ignoring .DS_Store files//
git config --global core.excludesfile ~/.gitignore
echo .DS_Store >> ~/.gitignore

Create an alias for a repository//
Use this alias instead of the url on push for ease//
git remote add "<name>" <url>

Create a new repository on the command line//
echo "# TestCanvasProject" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/UclanCreativeProgramming/TestCanvasProject.git
git push -u origin master

Push an existing repository from the command line//
git remote add origin https://github.com/UclanCreativeProgramming/TestCanvasProject.git
git push -u origin master

Pushing an update//
git add *
git commit -m "comment"
git push <repository name/url>

Comitting deleted files//
git add -u

Lists files that your repository is currently tracking//
git ls-files

This will be useful for when things go... not so well... it'll happen//
git blame <fileName>
It tells you who made changes to a specified file so you can easily find out who messed up, fun!

Pull from your local directory, useful for when you make an error, delete a file for example//
git checkout “<filename>”
of for checking out all files//
git checkout -- .
